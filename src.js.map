{"version":3,"sources":["services/OrderStorage.js","orders/controller/OrderListController.js","orders/services/OrderService.js","app.js","app.routes.js","orders/directives/todoEscape.js","orders/directives/todoFocus.js"],"names":["OrderStorage","$q","STORAGE_ID","orders","_getFromLocalStorage","angular","fromJson","localStorage","getItem","_saveToLocalStorage","todos","setItem","toJson","clearCompleted","deferred","defer","incompleteTodos","filter","todo","completed","copy","resolve","promise","delete","splice","indexOf","get","insert","push","put","order","index","OrderListCtrl","$scope","$routeParams","OrderService","ordersData","vm","this","TAP_COMPLETED","TAP_ACTIVE","orderService","isAllCompleted","isAllOrderCompleted","$watch","remainingCount","getNumOfActive","completedCount","getNumOfCompleted","$on","status","statusFilter","newOrder","title","canceled","oldOrder","isCanceled","setIsCanceled","cancel","getNewOrder","loadOrders","then","ordersCollection","map","item","isEditMode","bind","addOrder","removeOrder","clearCompletedOrders","updateOrder","editOrder","$event","stopPropagation","extend","revertEdits","saveEdits","markAll","isCompletedAll","forEach","ordersCompleted","length","module","config","$routeProvider","routeConfig","controller","controllerAs","templateUrl","when","otherwise","redirectTo","factory","directive","ESCAPE_KEY","scope","elem","attrs","event","keyCode","$apply","$eval","todoEscape","preventDefault","unbind","$timeout","element","todoFocus","newVal","focus"],"mappings":"AASA,QAAAA,cAAAC,IACA,YAEA,IAAAC,YAAA,iBACAC,UAEAC,qBAAA,WACA,MAAAC,SAAAC,SAAAC,aAAAC,QAAAN,aAAA,OAEAO,oBAAA,SAAAC,OACAH,aAAAI,QAAAT,WAAAG,QAAAO,OAAAF,QAGA,QACAG,eAAA,WACA,GAAAC,UAAAb,GAAAc,QAEAC,gBAAAb,OAAAc,OAAA,SAAAC,MACA,OAAAA,KAAAC,WAQA,OALAd,SAAAe,KAAAJ,gBAAAb,QAEAM,oBAAAN,QACAW,SAAAO,QAAAlB,QAEAW,SAAAQ,SAGAC,SAAA,SAAAL,MACA,GAAAJ,UAAAb,GAAAc,OAOA,OALAZ,QAAAqB,OAAArB,OAAAsB,QAAAP,MAAA,GAEAT,oBAAAN,QACAW,SAAAO,QAAAlB,QAEAW,SAAAQ,SAGAI,IAAA,WACA,GAAAZ,UAAAb,GAAAc,OAMA,OAJAV,SAAAe,KAAAhB,uBAAAD,QAEAW,SAAAO,QAAAlB,QAEAW,SAAAQ,SAGAK,OAAA,SAAAT,MACA,GAAAJ,UAAAb,GAAAc,OAOA,OALAZ,QAAAyB,KAAAV,MAEAT,oBAAAN,QACAW,SAAAO,QAAAlB,QAEAW,SAAAQ,SAGAO,IAAA,SAAAC,MAAAC,OACA,GAAAjB,UAAAb,GAAAc,OAOA,OALAZ,QAAAA,OAAAsB,QAAAK,QAAAA,MAEArB,oBAAAN,QACAW,SAAAO,QAAAlB,QAEAW,SAAAQ,UC/DA,QAAAU,eAAAC,OAAAC,aAAAC,aAAAC,YACA,YAEA,IAAAC,IAAAC,KACAC,cAAA,YACAC,WAAA,QAEAH,IAAAI,aAAAN,aACAE,GAAAK,eAAAP,aAAAQ,sBACAN,GAAAlC,OAAAiC,WAKAH,OAAAW,OAAA,uBAAA,WACAP,GAAAQ,eAAAV,aAAAW,iBACAT,GAAAU,eAAAZ,aAAAa,oBACAX,GAAAK,eAAAP,aAAAQ,wBACA,GAKAV,OAAAgB,IAAA,sBAAA,WACAZ,GAAAa,OAAAhB,aAAAgB,QAAA,GACAb,GAAAc,aAAAd,GAAAa,SAAAV,YACArB,WAAA,GAAAkB,GAAAa,SAAAX,eACApB,WAAA,QAMAc,OAAAgB,IAAA,WAAA,WACAZ,GAAA,KACAJ,OAAA,OC5CA,QAAAE,cAAAnC,cACA,YAEA,IAAAoD,WAAAjC,WAAA,EAAAkC,MAAA,IACAC,UAAA,EACAnD,UACAoD,SAAA,KAOAC,WAAA,WACA,MAAAF,WAMAG,cAAA,SAAAC,QACAJ,SAAAI,OAGA,QAMAC,YAAA,WACA,MAAAP,WAQAQ,WAAA,WACA,MAAA5D,cAAA0B,MAAAmC,KAAA,SAAAC,kBAMA,MALA3D,QAAA2D,iBAEA3D,OAAA4D,IAAA,SAAAC,MACAA,KAAAC,YAAA,IAEAH,kBACAI,KAAA5B,QAMA6B,SAAA,WACAf,SAAAC,OAIArD,aAAA2B,OAAAyB,UAAAS,KAAA,WACAT,UAAAjC,WAAA,EAAAkC,MAAA,OASAe,YAAA,SAAAtC,OACA9B,aAAAA,UAAA8B,QAMAuC,qBAAA,WACArE,aAAAa,kBAQAyD,YAAA,SAAAxC,OACA9B,aAAA6B,IAAAC,OAAA+B,KAAA,aAEA,eASAU,UAAA,SAAAC,OAAA1C,OACA0C,OAAAC,kBAEA3C,MAAAmC,YAAA,EACAV,SAAAlD,QAAAqE,UAAA5C,QAQA6C,YAAA,SAAAH,OAAA1C,OACA0C,OAAAC,kBAEA3C,MAAAuB,MAAAE,SAAAF,MACAvB,MAAAmC,YAAA,EAEA3B,KAAAgC,YAAAxC,OACAyB,SAAA,KACAE,eAAA,IAQAmB,UAAA,SAAAJ,OAAA1C,OAGA,MAFA0C,QAAAC,kBAEAjB,iBACAC,gBAAA,GAIA3B,MAAAuB,QAAAE,SAAAF,WACAvB,MAAAmC,YAAA,IAIAnC,MAAAuB,MACAf,KAAAgC,YAAAxC,OAEAQ,KAAA8B,YAAAtC,YAGAA,MAAAmC,YAAA,KAQAY,QAAA,SAAAC,gBACAA,eACA3E,OAAA4E,QAAA,SAAAjD,OACAA,MAAAX,WAAA,EACAmB,KAAAgC,YAAAxC,QACAQ,MAEAnC,OAAA4E,QAAA,SAAAjD,OACAA,MAAAX,YACAW,MAAAX,WAAA,EACAmB,KAAAgC,YAAAxC,SAEAQ,OASAK,oBAAA,WACA,GAAAqC,iBAAA7E,OAAAc,OAAA,SAAAa,OACA,MAAAA,OAAAX,aAAA,GAGA,OAAA6D,iBAAAC,SAAA9E,OAAA8E,QAQAnC,eAAA,WACA,MAAA3C,QAAAc,OAAA,SAAAa,OACA,MAAAA,OAAAX,aAAA,IACA8D,QAQAjC,kBAAA,WACA,MAAA7C,QAAAc,OAAA,SAAAa,OACA,MAAAA,OAAAX,aAAA,IACA8D,SC7MA5E,QAAA6E,OAAA,UAAA,UAAA,gBAAA,eCOA7E,QAAA6E,OAAA,iBAAA,YACAC,QAAA,iBAAA,SAAAC,gBACA,YAEA,IAAAC,cACAC,WAAA,sBACAC,aAAA,gBACAC,YAAA,yBACAnE,SACAe,WAAA,SAAAD,cACA,MAAAA,cAAAyB,eAKAwB,gBACAK,KAAA,IAAAJ,aACAI,KAAA,WAAAJ,aACAK,WACAC,WAAA,SJrBAtF,QACA6E,OAAA,UACAU,QAAA,gBAAA,KAAA5F,eCFAK,QACA6E,OAAA,UACAI,WAAA,uBACA,SACA,eACA,eACA,aACAtD,gBINA3B,QAAA6E,OAAA,UACAW,UAAA,aAAA,WACA,YAEA,IAAAC,YAAA,EAEA,OAAA,UAAAC,MAAAC,KAAAC,OACAD,KAAA9B,KAAA,UAAA,SAAAgC,OACAA,MAAAC,UAAAL,aACAC,MAAAK,OAAA,WACAL,MAAAM,MAAAJ,MAAAK,YAAA9B,OAAA0B,UAGAA,MAAAK,oBAIAR,MAAA9C,IAAA,WAAA,WACA+C,KAAAQ,OAAA,gBClBAnG,QAAA6E,OAAA,UACAW,UAAA,aAAA,WAAA,SAAAY,UACA,YAEA,OAAA,UAAAV,MAAAW,QAAAT,OACAF,MAAAnD,OAAAqD,MAAAU,UAAA,SAAAC,QACAA,QACAH,SAAA,WACAC,QAAA,GAAAG,gBJZAxG,QACA6E,OAAA,UACAU,QAAA,gBAAA,eAAAzD","file":"src.js","sourcesContent":["/*global angular */\n\n/**\n * Service that persists and retrieves orders from local storage.\n */\nangular\n\t.module('orders')\n\t.factory('OrderStorage', ['$q', OrderStorage]);\n\nfunction OrderStorage($q) {\n\t'use strict';\n\n\tvar STORAGE_ID = 'orders-storage',\n\t\torders = [],\n\n\t\t_getFromLocalStorage = function () {\n\t\t\treturn angular.fromJson(localStorage.getItem(STORAGE_ID) || '[]');\n\t\t},\n\t\t_saveToLocalStorage = function (todos) {\n\t\t\tlocalStorage.setItem(STORAGE_ID, angular.toJson(todos));\n\t\t};\n\n\treturn {\n\t\tclearCompleted: function () {\n\t\t\tvar deferred = $q.defer();\n\n\t\t\tvar incompleteTodos = orders.filter(function (todo) {\n\t\t\t\treturn !todo.completed;\n\t\t\t});\n\n\t\t\tangular.copy(incompleteTodos, orders);\n\n\t\t\t_saveToLocalStorage(orders);\n\t\t\tdeferred.resolve(orders);\n\n\t\t\treturn deferred.promise;\n\t\t},\n\n\t\tdelete: function (todo) {\n\t\t\tvar deferred = $q.defer();\n\n\t\t\torders.splice(orders.indexOf(todo), 1);\n\n\t\t\t_saveToLocalStorage(orders);\n\t\t\tdeferred.resolve(orders);\n\n\t\t\treturn deferred.promise;\n\t\t},\n\n\t\tget: function () {\n\t\t\tvar deferred = $q.defer();\n\n\t\t\tangular.copy(_getFromLocalStorage(), orders);\n\n\t\t\tdeferred.resolve(orders);\n\n\t\t\treturn deferred.promise;\n\t\t},\n\n\t\tinsert: function (todo) {\n\t\t\tvar deferred = $q.defer();\n\n\t\t\torders.push(todo);\n\n\t\t\t_saveToLocalStorage(orders);\n\t\t\tdeferred.resolve(orders);\n\n\t\t\treturn deferred.promise;\n\t\t},\n\n\t\tput: function (order, index) {\n\t\t\tvar deferred = $q.defer();\n\n\t\t\torders[orders.indexOf(order)] = order;\n\n\t\t\t_saveToLocalStorage(orders);\n\t\t\tdeferred.resolve(orders);\n\n\t\t\treturn deferred.promise;\n\t\t}\n\t};\n};\n","/*global angular */\n\n/**\n * Controller to order list and order service connection.\n */\nangular\n\t.module('orders')\n\t.controller('OrderListController', [\n\t\t'$scope',\n\t\t'$routeParams',\n\t\t'OrderService',\n\t\t'ordersData',\n\t\tOrderListCtrl\n\t]);\n\nfunction OrderListCtrl($scope, $routeParams, OrderService, ordersData) {\n\t'use strict';\n\n\tvar vm = this,\n\t\tTAP_COMPLETED = 'completed',\n\t\tTAP_ACTIVE = 'active';\n\n\tvm.orderService = OrderService;\n\tvm.isAllCompleted = OrderService.isAllOrderCompleted();\n\tvm.orders = ordersData;\n\n\t/**\n\t * Listener to all changes om orders.\n\t */\n\t$scope.$watch('OrderListCtrl.orders', function () {\n\t\tvm.remainingCount = OrderService.getNumOfActive();\n\t\tvm.completedCount = OrderService.getNumOfCompleted();\n\t\tvm.isAllCompleted = OrderService.isAllOrderCompleted();\n\t}, true);\n\n\t/**\n\t * Monitor the current route for changes and adjust the filter accordingly.\n\t */\n\t$scope.$on('$routeChangeSuccess', function () {\n\t\tvm.status = $routeParams.status || '';\n\t\tvm.statusFilter = (vm.status === TAP_ACTIVE) ?\n\t\t\t{ completed: false } : (vm.status === TAP_COMPLETED) ?\n\t\t\t{ completed: true } : {};\n\t});\n\n\t/**\n\t * Clean up memory after destroy component.\n\t */\n\t$scope.$on('$destroy', function(){\n\t\tvm = null;\n\t\t$scope = null;\n\t});\n}\n","/*global angular */\r\n\r\nangular\r\n\t.module('orders')\r\n\t.factory('OrderService', ['OrderStorage', OrderService]);\r\n\r\nfunction OrderService(OrderStorage) {\r\n\t'use strict';\r\n\r\n\tvar newOrder = {completed: false, title: ''},\r\n\t\tcanceled = false,\r\n\t\torders = [],\r\n\t\toldOrder = null,\r\n\r\n\t\t/**\r\n\t\t * Return is order editing canceled.\r\n\t\t *\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tisCanceled = function () {\r\n\t\t\treturn canceled;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * @param {boolean} cancel\r\n\t\t */\r\n\t\tsetIsCanceled = function (cancel) {\r\n\t\t\tcanceled = cancel;\r\n\t\t};\r\n\r\n\treturn {\r\n\t\t/**\r\n\t\t * Get new empty order object.\r\n\t\t *\r\n\t\t * @returns {{completed: boolean, title: string}}\r\n\t\t */\r\n\t\tgetNewOrder: function () {\r\n\t\t\treturn newOrder;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Load orders collection from backend data.\r\n\t\t *\r\n\t\t * @returns {Array}\r\n\t\t */\r\n\t\tloadOrders: function () {\r\n\t\t\treturn OrderStorage.get().then(function (ordersCollection) {\r\n\t\t\t\torders = ordersCollection;\r\n\r\n\t\t\t\torders.map(function (item) {\r\n\t\t\t\t\titem.isEditMode = false;\r\n\t\t\t\t});\r\n\t\t\t\treturn ordersCollection;\r\n\t\t\t}.bind(this));\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add new order item to collection.\r\n\t\t */\r\n\t\taddOrder: function () {\r\n\t\t\tif (!newOrder.title) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tOrderStorage.insert(newOrder).then(function success() {\r\n\t\t\t\tnewOrder = {completed: false, title: ''};\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Remove order item from collection.\r\n\t\t *\r\n\t\t * @param order\r\n\t\t */\r\n\t\tremoveOrder: function (order) {\r\n\t\t\tOrderStorage.delete(order);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Remove all completed orders from collection.\r\n\t\t */\r\n\t\tclearCompletedOrders: function () {\r\n\t\t\tOrderStorage.clearCompleted();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update data about target order in collection.\r\n\t\t *\r\n\t\t * @param {Object} order\r\n\t\t */\r\n\t\tupdateOrder: function (order) {\r\n\t\t\tOrderStorage.put(order).then(function success() {\r\n\r\n\t\t\t}, function error() {\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Assign old value of order item during editing.\r\n\t\t *\r\n\t\t * @param {Object} order\r\n\t\t */\r\n\t\teditOrder: function ($event, order) {\r\n\t\t\t$event.stopPropagation();\r\n\r\n\t\t\torder.isEditMode = true;\r\n\t\t\toldOrder = angular.extend({}, order);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * If user press 'Esc' key during editing item.\r\n\t\t *\r\n\t\t * @param {Object} order\r\n\t\t */\r\n\t\trevertEdits: function ($event, order) {\r\n\t\t\t$event.stopPropagation();\r\n\r\n\t\t\torder.title = oldOrder.title;\r\n\t\t\torder.isEditMode = false;\r\n\r\n\t\t\tthis.updateOrder(order);\r\n\t\t\toldOrder = null;\r\n\t\t\tsetIsCanceled(true);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Save order item after editing.\r\n\t\t *\r\n\t\t * @param {Object} order\r\n\t\t */\r\n\t\tsaveEdits: function ($event, order) {\r\n\t\t\t$event.stopPropagation();\r\n\r\n\t\t\tif (isCanceled()) {\r\n\t\t\t\tsetIsCanceled(false);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (order.title === oldOrder.title) {\r\n\t\t\t\torder.isEditMode = false;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (order.title) {\r\n\t\t\t\tthis.updateOrder(order);\r\n\t\t\t} else {\r\n\t\t\t\tthis.removeOrder(order);\r\n\t\t\t}\r\n\r\n\t\t\torder.isEditMode = false;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Mark all order item as completed or uncompleted by arg value.\r\n\t\t *\r\n\t\t * @param {boolean} isCompletedAll\r\n\t\t */\r\n\t\tmarkAll: function (isCompletedAll) {\r\n\t\t\tif (isCompletedAll) {\r\n\t\t\t\torders.forEach(function (order) {\r\n\t\t\t\t\torder.completed = false;\r\n\t\t\t\t\tthis.updateOrder(order);\r\n\t\t\t\t}, this);\r\n\t\t\t} else {\r\n\t\t\t\torders.forEach(function (order) {\r\n\t\t\t\t\tif (!order.completed) {\r\n\t\t\t\t\t\torder.completed = true;\r\n\t\t\t\t\t\tthis.updateOrder(order);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, this);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Check that all orders item are completed.\r\n\t\t *\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tisAllOrderCompleted: function () {\r\n\t\t\tvar ordersCompleted = orders.filter(function (order) {\r\n\t\t\t\treturn (order.completed === true);\r\n\t\t\t});\r\n\r\n\t\t\treturn (ordersCompleted.length === orders.length);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return number of active orders.\r\n\t\t *\r\n\t\t * @returns {Number}\r\n\t\t */\r\n\t\tgetNumOfActive: function () {\r\n\t\t\treturn orders.filter(function (order) {\r\n\t\t\t\treturn (order.completed === false);\r\n\t\t\t}).length;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return number of active orders.\r\n\t\t *\r\n\t\t * @returns {Number}\r\n\t\t */\r\n\t\tgetNumOfCompleted: function () {\r\n\t\t\treturn orders.filter(function (order) {\r\n\t\t\t\treturn (order.completed === true);\r\n\t\t\t}).length;\r\n\t\t}\r\n\t};\r\n};","angular.module('orders', ['ngRoute', 'orders.routes', 'ngMaterial']);","/*global angular */\r\n\r\n/**\r\n * The main ordering routing module\r\n *\r\n * @type {angular.Module}\r\n */\r\nangular.module('orders.routes', ['ngRoute'])\r\n\t.config(function ($routeProvider) {\r\n\t\t'use strict';\r\n\r\n\t\tvar routeConfig = {\r\n\t\t\tcontroller: 'OrderListController',\r\n\t\t\tcontrollerAs: 'OrderListCtrl',\r\n\t\t\ttemplateUrl: 'js/templates/home.html',\r\n\t\t\tresolve: {\r\n\t\t\t\tordersData: function (OrderService) {\r\n\t\t\t\t\treturn OrderService.loadOrders();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t$routeProvider\r\n\t\t\t.when('/', routeConfig)\r\n\t\t\t.when('/:status', routeConfig)\r\n\t\t\t.otherwise({\r\n\t\t\t\tredirectTo: '/'\r\n\t\t\t});\r\n\t});","/*global angular */\n\n/**\n * Directive that executes an expression when the element it is applied to gets\n * an `escape` keydown event.\n */\nangular.module('orders')\n\t.directive('todoEscape', function () {\n\t\t'use strict';\n\n\t\tvar ESCAPE_KEY = 27;\n\n\t\treturn function (scope, elem, attrs) {\n\t\t\telem.bind('keydown', function (event) {\n\t\t\t\tif (event.keyCode === ESCAPE_KEY) {\n\t\t\t\t\tscope.$apply(function(){\n\t\t\t\t\t\tscope.$eval(attrs.todoEscape, {$event : event});\n\t\t\t\t\t});\n\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tscope.$on('$destroy', function () {\n\t\t\t\telem.unbind('keydown');\n\t\t\t});\n\t\t};\n\t});\n","/*global angular */\r\n\r\n/**\r\n * Directive that places focus on the element it is applied to when the\r\n * expression it binds to evaluates to true\r\n */\r\nangular.module('orders')\r\n\t.directive('todoFocus', function todoFocus($timeout) {\r\n\t\t'use strict';\r\n\r\n\t\treturn function (scope, element, attrs) {\r\n\t\t\tscope.$watch(attrs.todoFocus, function (newVal) {\r\n\t\t\t\tif (newVal) {\r\n\t\t\t\t\t$timeout(function() {\r\n\t\t\t\t\t\telement[0].focus();\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\t});\r\n"],"sourceRoot":"/source/"}