{"version":3,"sources":["services/OrderStorage.js","services/RestaurantStorage.js","services/StatusStorage.js","login/controller/LoginController.js","login/controller/LogoutController.js","login/services/AccountService.js","orders/controller/MenuController.js","orders/controller/OrderFormController.js","orders/controller/OrderListController.js","orders/services/OrderService.js","orders/services/RestaurantService.js","app.js","app.routes.js","src.js"],"names":["OrderStorage","$q","STORAGE_ID","orders","_getFromLocalStorage","angular","fromJson","localStorage","getItem","_saveToLocalStorage","setItem","toJson","clearCompleted","deferred","defer","incompleteOrders","filter","order","completed","copy","resolve","promise","delete","splice","indexOf","get","insert","push","put","index","RestaurantStorage","restaurantData","id","name","menu","price","restaurants","restaurantsData","loadRestaurantsData","incompleteTodos","todo","restaurant","StatusStorage","status","parseInt","LoginCtrl","$scope","$location","$auth","vm","this","login","user","then","path","error","authenticate","provider","$on","LogoutCtrl","isAuthenticated","logout","AccountModel","$http","getProfile","updateProfile","profileData","AccountService","getUserData","response","data","MenuCtrl","OrderService","orderService","isMenuOpen","clearAfterDestroy","showHideMenu","OrderFormCtrl","userData","RestaurantService","restaurantService","isAddOrderEnabled","$watch","selectedMeal","addOrder","getNewOrder","console","log","title","selectedRestaurant","OrderListCtrl","ordersData","$state","TAP_COMPLETED","TAP_ACTIVE","isAllCompleted","isAllOrderCompleted","remainingCount","getNumOfActive","completedCount","getNumOfCompleted","params","go","statusFilter","isActiveTap","isCompletedTap","newOrder","date","orderListStatus","STATUS_OPEN","STATUS_FINALIZED","STATUS_ORDERED","STATUS_DELIVERED","_getCurrentDate","currentDate","Date","setHours","setMinutes","setSeconds","setMilliseconds","loadOrders","ordersCollection","map","item","bind","newOrderItem","isUserOrderedToday","some","_id","Number","updateOrder","removeOrder","clearCompletedOrders","markAll","isCompletedAll","forEach","ordersCompleted","length","updateListStatus","loadListStatus","openOrdering","finalizedOrdering","orderedOrders","deliveredOrders","isOrderActive","isOrderFinalized","isOrderOrdered","isOrderDelivered","isOrderRemoveEnabled","currentUser","loadRestaurant","restaurantsCollection","getSelectedRestaurant","setSelectedRestaurant","selectedItem","getSelectedMeal","setSelectedMeal","module","config","$authProvider","$windowProvider","github","clientId","authorizationEndpoint","redirectUri","$get","location","origin","protocol","host","optionalUrlParams","scope","scopeDelimiter","oauthType","popupOptions","width","height","oauth2","url","baseUrl","withCredentials","$mdThemingProvider","theme","primaryPalette","default","accentPalette","$stateProvider","$urlRouterProvider","loginRequired","$inject","skipIfLoggedIn","reject","state","templateUrl","controller","template","views","","top@home","listStatus","menu@home","otherwise","factory"],"mappings":"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","file":"src.js","sourcesContent":["/*global angular */\r\n\r\n/**\r\n * Service that persists and retrieves orders from local storage.\r\n */\r\nangular\r\n\t.module('orders')\r\n\t.factory('OrderStorage', ['$q', OrderStorage]);\r\n\r\nfunction OrderStorage($q) {\r\n\t'use strict';\r\n\r\n\tvar STORAGE_ID = 'orders-storage',\r\n\t\torders = [],\r\n\r\n\t\t_getFromLocalStorage = function () {\r\n\t\t\treturn angular.fromJson(localStorage.getItem(STORAGE_ID) || '[]');\r\n\t\t},\r\n\t\t_saveToLocalStorage = function (orders) {\r\n\t\t\tlocalStorage.setItem(STORAGE_ID, angular.toJson(orders));\r\n\t\t};\r\n\r\n\treturn {\r\n\t\tclearCompleted: function () {\r\n\t\t\tvar deferred = $q.defer();\r\n\r\n\t\t\tvar incompleteOrders = orders.filter(function (order) {\r\n\t\t\t\treturn !order.completed;\r\n\t\t\t});\r\n\r\n\t\t\tangular.copy(incompleteOrders, orders);\r\n\r\n\t\t\t_saveToLocalStorage(orders);\r\n\t\t\tdeferred.resolve(orders);\r\n\r\n\t\t\treturn deferred.promise;\r\n\t\t},\r\n\r\n\t\tdelete: function (order) {\r\n\t\t\tvar deferred = $q.defer();\r\n\r\n\t\t\torders.splice(orders.indexOf(order), 1);\r\n\r\n\t\t\t_saveToLocalStorage(orders);\r\n\t\t\tdeferred.resolve(orders);\r\n\r\n\t\t\treturn deferred.promise;\r\n\t\t},\r\n\r\n\t\tget: function () {\r\n\t\t\tvar deferred = $q.defer();\r\n\r\n\t\t\tangular.copy(_getFromLocalStorage(), orders);\r\n\r\n\t\t\tdeferred.resolve(orders);\r\n\r\n\t\t\treturn deferred.promise;\r\n\t\t},\r\n\r\n\t\tinsert: function (order) {\r\n\t\t\tvar deferred = $q.defer();\r\n\r\n\t\t\torders.push(order);\r\n\r\n\t\t\t_saveToLocalStorage(orders);\r\n\t\t\tdeferred.resolve(orders);\r\n\r\n\t\t\treturn deferred.promise;\r\n\t\t},\r\n\r\n\t\tput: function (order, index) {\r\n\t\t\tvar deferred = $q.defer();\r\n\r\n\t\t\torders[orders.indexOf(order)] = order;\r\n\r\n\t\t\t_saveToLocalStorage(orders);\r\n\t\t\tdeferred.resolve(orders);\r\n\r\n\t\t\treturn deferred.promise;\r\n\t\t}\r\n\t};\r\n};\r\n","/*global angular */\r\n\r\n/**\r\n * Service that persists and retrieves restaurant and our menu on local storage.\r\n */\r\nangular\r\n\t.module('orders')\r\n\t.factory('RestaurantStorage', ['$q', RestaurantStorage]);\r\n\r\nfunction RestaurantStorage($q) {\r\n\t'use strict';\r\n\r\n\tvar restaurantData = [{\r\n\t\t'id': 0,\r\n\t\t'name': 'ThaiVet',\r\n\t\t'menu': [\r\n\t\t\t{\r\n\t\t\t\t'name': 'Wołowina po tajsku',\r\n\t\t\t\t'price': '13.99'\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t'name': 'Kaczka po chińsku',\r\n\t\t\t\t'price': '17.99'\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t'name': 'Kurzczak curry zielone',\r\n\t\t\t\t'price': '12.99'\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t'name': 'Krewetki w pięciu smakach',\r\n\t\t\t\t'price': '20.00'\r\n\t\t\t}\r\n\t\t]\r\n\t}, {\r\n\t\t'id': 1,\r\n\t\t'name': 'Greenway',\r\n\t\t'menu': [\r\n\t\t\t{\r\n\t\t\t\t'name': 'Kofta z pieca',\r\n\t\t\t\t'price': '16.99'\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t'name': 'Placki z ciecierzycy',\r\n\t\t\t\t'price': '15.99'\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t'name': 'Zapiekanka z cukinii',\r\n\t\t\t\t'price': '15.99'\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t'name': 'Gulasz z soji',\r\n\t\t\t\t'price': '13.00'\r\n\t\t\t}\r\n\t\t]\r\n\t}];\r\n\r\n\tvar STORAGE_ID = 'restaurant-storage',\r\n\t\trestaurants = [],\r\n\r\n\t\t_getFromLocalStorage = function () {\r\n\t\t\treturn angular.fromJson(localStorage.getItem(STORAGE_ID) || '[]');\r\n\t\t},\r\n\t\t_saveToLocalStorage = function (restaurantsData) {\r\n\t\t\tlocalStorage.setItem(STORAGE_ID, angular.toJson(restaurantsData));\r\n\t\t};\r\n\r\n\t_saveToLocalStorage(restaurantData);\r\n\r\n\treturn {\r\n\t\tloadRestaurantsData: function () {\r\n\t\t\tvar deferred = $q.defer();\r\n\r\n\t\t\tvar incompleteTodos = restaurants.filter(function (todo) {\r\n\t\t\t\treturn !todo.completed;\r\n\t\t\t});\r\n\r\n\t\t\tangular.copy(incompleteTodos, restaurants);\r\n\r\n\t\t\t_saveToLocalStorage(restaurants);\r\n\t\t\tdeferred.resolve(restaurants);\r\n\r\n\t\t\treturn deferred.promise;\r\n\t\t},\r\n\r\n\t\tdelete: function (restaurant) {\r\n\t\t\tvar deferred = $q.defer();\r\n\r\n\t\t\trestaurants.splice(restaurants.indexOf(restaurant), 1);\r\n\r\n\t\t\t_saveToLocalStorage(restaurants);\r\n\t\t\tdeferred.resolve(restaurants);\r\n\r\n\t\t\treturn deferred.promise;\r\n\t\t},\r\n\r\n\t\tget: function () {\r\n\t\t\tvar deferred = $q.defer();\r\n\r\n\t\t\tangular.copy(_getFromLocalStorage(), restaurants);\r\n\r\n\t\t\tdeferred.resolve(restaurants);\r\n\r\n\t\t\treturn deferred.promise;\r\n\t\t},\r\n\r\n\t\tinsert: function (restaurant) {\r\n\t\t\tvar deferred = $q.defer();\r\n\r\n\t\t\trestaurants.push(restaurant);\r\n\r\n\t\t\t_saveToLocalStorage(restaurants);\r\n\t\t\tdeferred.resolve(restaurants);\r\n\r\n\t\t\treturn deferred.promise;\r\n\t\t},\r\n\r\n\t\tput: function (restaurant, index) {\r\n\t\t\tvar deferred = $q.defer();\r\n\r\n\t\t\trestaurants[restaurants.indexOf(restaurant)] = restaurant;\r\n\r\n\t\t\t_saveToLocalStorage(restaurants);\r\n\t\t\tdeferred.resolve(restaurants);\r\n\r\n\t\t\treturn deferred.promise;\r\n\t\t}\r\n\t};\r\n};\r\n","/*global angular */\r\n\r\n/**\r\n * Service that persists and retrieves order list status from local storage.\r\n */\r\nangular\r\n\t.module('orders')\r\n\t.factory('StatusStorage', ['$q', StatusStorage]);\r\n\r\nfunction StatusStorage($q) {\r\n\t'use strict';\r\n\r\n\tvar STORAGE_ID = 'status-storage',\r\n\t\tstatus = 0,\r\n\r\n\t\t_getFromLocalStorage = function () {\r\n\t\t\treturn localStorage.getItem(STORAGE_ID || 0);\r\n\t\t},\r\n\t\t_saveToLocalStorage = function (status) {\r\n\t\t\tlocalStorage.setItem(STORAGE_ID, status);\r\n\t\t};\r\n\r\n\treturn {\r\n\t\tget: function () {\r\n\t\t\tvar deferred = $q.defer();\r\n\r\n\t\t\tstatus = parseInt(_getFromLocalStorage());\r\n\t\t\tdeferred.resolve(status);\r\n\r\n\t\t\treturn deferred.promise;\r\n\t\t},\r\n\r\n\t\tput: function (status, index) {\r\n\t\t\tvar deferred = $q.defer();\r\n\r\n\t\t\t_saveToLocalStorage(status);\r\n\t\t\tdeferred.resolve(status);\r\n\r\n\t\t\treturn deferred.promise;\r\n\t\t}\r\n\t};\r\n};\r\n","/*global angular */\r\n\r\n/**\r\n * Controller to order list and order service connection.\r\n */\r\nangular\r\n\t.module('orders')\r\n\t.controller('LoginController', [\r\n\t\t'$scope',\r\n\t\t'$location',\r\n\t\t'$auth',\r\n\t\tLoginCtrl\r\n\t]);\r\n\r\nfunction LoginCtrl($scope, $location, $auth) {\r\n\t'use strict';\r\n\tvar vm = this;\r\n\r\n\tvm.login = function() {\r\n\t\t$auth.login($scope.user)\r\n\t\t\t.then(function() {\r\n\t\t\t\t//toastr.success('You have successfully signed in!');\r\n\t\t\t\t$location.path('');\r\n\t\t\t})\r\n\t\t\t.catch(function(error) {\r\n\t\t\t\t//toastr.error(error.data.message, error.status);\r\n\t\t\t});\r\n\t};\r\n\r\n\tvm.authenticate = function(provider) {\r\n\t\t$auth.authenticate(provider)\r\n\t\t\t.then(function() {\r\n\t\t\t\t$location.path('');\r\n\t\t\t})\r\n\t\t\t.catch(function(error) {\r\n\t\t\t\t$location.path('/logout');\r\n\t\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Clean up memory after destroy component.\r\n\t */\r\n\t$scope.$on('$destroy', function(){\r\n\t\tvm = null;\r\n\t\t$scope = null;\r\n\t});\r\n}\r\n","/*global angular */\r\n\r\n/**\r\n * Controller to order list and order service connection.\r\n */\r\nangular\r\n\t.module('orders')\r\n\t.controller('LogoutController', [\r\n\t\t'$scope',\r\n\t\t'$location',\r\n\t\t'$auth',\r\n\t\tLogoutCtrl\r\n\t]);\r\n\r\nfunction LogoutCtrl($scope, $location, $auth) {\r\n\t'use strict';\r\n\r\n\tvar vm = this;\r\n\r\n\tif (!$auth.isAuthenticated()) { return; }\r\n\r\n\t$auth.logout()\r\n\t\t.then(function() {\r\n\t\t\t//toastr.info('You have been logged out');\r\n\t\t\t$location.path('/login');\r\n\t\t});\r\n\r\n\t/**\r\n\t * Clean up memory after destroy component.\r\n\t */\r\n\t$scope.$on('$destroy', function(){\r\n\t\tvm = null;\r\n\t\t$scope = null;\r\n\t});\r\n}\r\n","/*global angular */\r\n\r\nangular\r\n\t.module('orders')\r\n\t.factory('AccountModel', ['$http', AccountModel])\r\n\t.factory('AccountService', ['AccountModel', AccountService]);\r\n\r\nfunction AccountModel($http) {\r\n\t'use strict';\r\n\treturn {\r\n\t\tgetProfile: function() {\r\n\t\t\treturn $http.get('http://localhost:3000/api/me');\r\n\t\t},\r\n\r\n\t\tupdateProfile: function(profileData) {\r\n\t\t\treturn $http.put('/api/me', profileData);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nfunction AccountService(AccountModel) {\r\n\t'use strict';\r\n    var user = null;\r\n\r\n\treturn {\r\n\t\tgetUserData: function () {\r\n\t\t\tif (user) {\r\n\t\t\t\treturn user;\r\n\t\t\t}\r\n\r\n\t\t\treturn AccountModel.getProfile()\r\n\t\t\t\t.then(function(response) {\r\n\t\t\t\t\tuser = response.data;\r\n\t\t\t\t\treturn response.data;\r\n\t\t\t\t})\r\n\t\t\t\t.catch(function(response) {});\r\n\t\t}\r\n\t};\r\n};\r\n","/**\r\n * Controller to menu order list state\r\n */\r\nangular\r\n\t.module('orders')\r\n\t.controller('MenuController', [\r\n\t\t'$scope',\r\n\t\t'OrderService',\r\n\t\tMenuCtrl\r\n\t]);\r\n\r\nfunction MenuCtrl($scope, OrderService) {\r\n\t'use strict';\r\n\r\n\tvar vm = this;\r\n\tvm.orderService = OrderService;\r\n\tvm.isMenuOpen = false;\r\n\r\n\t/**\r\n\t * Clean up memory after destroy component.\r\n\t */\r\n\t$scope.$on('$destroy', function(){\r\n\t\tvm.clearAfterDestroy();\r\n\t});\r\n\r\n\tvm.showHideMenu = function() {\r\n\t\tvm.isMenuOpen = !vm.isMenuOpen;\r\n\t};\r\n\r\n\tvm.clearAfterDestroy = function () {\r\n\t\tvm = null;\r\n\t\t$scope = null;\r\n\t};\r\n}\r\n","/**\r\n * Controller to order list and order service connection.\r\n */\r\nangular\r\n\t.module('orders')\r\n\t.controller('OrderFormController', [\r\n\t\t'$scope',\r\n\t\t'OrderService',\r\n\t\t'restaurantsData',\r\n\t\t'userData',\r\n\t\t'$auth',\r\n\t\t'RestaurantService',\r\n\t\tOrderFormCtrl\r\n\t]);\r\n\r\nfunction OrderFormCtrl($scope, OrderService, restaurantsData, userData, $auth, RestaurantService) {\r\n\t'use strict';\r\n\r\n\tvar vm = this;\r\n\r\n\tvm.orderService = OrderService;\r\n\tvm.restaurants = restaurantsData;\r\n\tvm.user = userData;\r\n\tvm.restaurantService = RestaurantService;\r\n\tvm.isAddOrderEnabled = false;\r\n\r\n\t/**\r\n\t * Listener to all changes om orders.\r\n\t */\r\n\t$scope.$watch('OrderFormCtrl.restaurantService.selectedMeal', function () {\r\n\t\tif (vm.restaurantService.selectedMeal) {\r\n\t\t\tvm.isAddOrderEnabled = true;\r\n\t\t}\r\n\t}, true);\r\n\r\n\t/**\r\n\t * Clean up memory after destroy component.\r\n\t */\r\n\t$scope.$on('$destroy', function(){\r\n\t\tvm = null;\r\n\t\t$scope = null;\r\n\t});\r\n\r\n\tvm.isAuthenticated = function() {\r\n\t\treturn $auth.isAuthenticated();\r\n\t};\r\n\r\n\tvm.addOrder = function () {\r\n\t\tvar order = vm.orderService.getNewOrder(),\r\n\t\t\tselectedMeal = vm.restaurantService.selectedMeal;\r\n\r\n\t\tconsole.log('----- OrderFormCtrl:addOrder:order: ', order);\r\n\t\torder.user = vm.user;\r\n\t\torder.title = vm.restaurantService.selectedRestaurant.name + ' - ' + selectedMeal.name;\r\n\t\torder.price = selectedMeal.price;\r\n\r\n\t\tOrderService.addOrder(order);\r\n\t};\r\n}\r\n","/*global angular */\r\n\r\n/**\r\n * Controller to order list and order service connection.\r\n */\r\nangular\r\n\t.module('orders')\r\n\t.controller('OrderListController', [\r\n\t\t'$scope',\r\n\t\t'OrderService',\r\n\t\t'ordersData',\r\n\t\t'$auth',\r\n\t\t'$state',\r\n\t\tOrderListCtrl\r\n\t]);\r\n\r\nfunction OrderListCtrl($scope, OrderService, ordersData, $auth, $state) {\r\n\t'use strict';\r\n\r\n\tvar vm = this,\r\n\t\tTAP_COMPLETED = 'completed',\r\n\t\tTAP_ACTIVE = 'active';\r\n\r\n\tvm.orderService = OrderService;\r\n\tvm.isAllCompleted = OrderService.isAllOrderCompleted();\r\n\tvm.orders = ordersData;\r\n\r\n\t/**\r\n\t * Listener to all changes om orders.\r\n\t */\r\n\t$scope.$watch('OrderListCtrl.orders', function () {\r\n\t\tvm.remainingCount = OrderService.getNumOfActive();\r\n\t\tvm.completedCount = OrderService.getNumOfCompleted();\r\n\t\tvm.isAllCompleted = OrderService.isAllOrderCompleted();\r\n\t}, true);\r\n\r\n\t/**\r\n\t * Monitor the current route for changes and adjust the filter accordingly.\r\n\t */\r\n\t$scope.$on('$stateChangeSuccess', function () {\r\n\t\tvm.status = $state.params.status || '';\r\n\r\n\t\tif (vm.status === '') {\r\n\t\t\t$state.go('home.list');\r\n\t\t}\r\n\r\n\t\tvm.statusFilter = (vm.status === TAP_ACTIVE) ?\r\n\t\t\t{ completed: false } : (vm.status === TAP_COMPLETED) ?\r\n\t\t\t{ completed: true } : {};\r\n\t});\r\n\r\n\t/**\r\n\t * Clean up memory after destroy component.\r\n\t */\r\n\t$scope.$on('$destroy', function(){\r\n\t\tvm = null;\r\n\t\t$scope = null;\r\n\t});\r\n\r\n\t/**\r\n\t * @returns {boolean}\r\n\t */\r\n\tvm.isActiveTap = function() {\r\n\t\treturn (vm.status === TAP_ACTIVE);\r\n\t};\r\n\r\n\t/**\r\n\t * @returns {boolean}\r\n\t */\r\n\tvm.isCompletedTap = function() {\r\n\t\treturn (vm.status === TAP_COMPLETED);\r\n\t};\r\n\r\n\tvm.isAuthenticated = function() {\r\n\t\treturn $auth.isAuthenticated();\r\n\t};\r\n}\r\n","/*global angular */\r\n\r\nangular\r\n\t.module('orders')\r\n\t.factory('OrderService', ['OrderStorage', 'StatusStorage','AccountService', OrderService]);\r\n\r\nfunction OrderService(OrderStorage, StatusStorage, AccountService) {\r\n\t'use strict';\r\n\r\n\tvar newOrder = {\r\n\t\tcompleted: false,\r\n\t\ttitle: '',\r\n\t\tuser: null,\r\n\t\tprice:'',\r\n\t\tdate:''\r\n\t},\r\n\t\torders = null,\r\n\t\torderListStatus = 0;\r\n\r\n\tvar STATUS_OPEN = 0,\r\n\t\tSTATUS_FINALIZED = 1,\r\n\t\tSTATUS_ORDERED = 2,\r\n\t\tSTATUS_DELIVERED = 3;\r\n\r\n\tvar _getCurrentDate = function () {\r\n\t\tvar currentDate = new Date();\r\n\r\n\t\tcurrentDate.setHours(0);\r\n\t\tcurrentDate.setMinutes(0);\r\n\t\tcurrentDate.setSeconds(0);\r\n\t\tcurrentDate.setMilliseconds(0);\r\n\r\n\t\treturn currentDate;\r\n\t};\r\n\r\n\treturn {\r\n\t\t/**\r\n\t\t * Get new empty order object.\r\n\t\t *\r\n\t\t * @returns {{completed: boolean, title: string}}\r\n\t\t */\r\n\t\tgetNewOrder: function () {\r\n\t\t\treturn newOrder;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Load orders collection from backend data.\r\n\t\t *\r\n\t\t * @returns {Array}\r\n\t\t */\r\n\t\tloadOrders: function () {\r\n\t\t\tif (orders !== null) {\r\n\t\t\t\treturn orders;\r\n\t\t\t}\r\n\r\n\t\t\treturn OrderStorage.get().then(function (ordersCollection) {\r\n\t\t\t\torders = ordersCollection;\r\n\r\n\t\t\t\tordersCollection.map(function (item) {\r\n\t\t\t\t\titem.date = new Date(item.date);\r\n\t\t\t\t\treturn item;\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn ordersCollection;\r\n\t\t\t}.bind(this));\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add new order item to collection.\r\n\t\t */\r\n\t\taddOrder: function (newOrderItem) {\r\n\t\t\tif (!newOrder.title) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tnewOrderItem.date = _getCurrentDate();\r\n\r\n\t\t\tOrderStorage.insert(newOrderItem).then(function success() {\r\n\t\t\t\tnewOrder = {\r\n\t\t\t\t\tcompleted: false,\r\n\t\t\t\t\ttitle: '',\r\n\t\t\t\t\tuser: null,\r\n\t\t\t\t\tprice:'',\r\n\t\t\t\t\tdate:''\r\n\t\t\t\t};\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Check that user order meal today yet.\r\n\t\t *\r\n\t\t * @param {Object} user\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tisUserOrderedToday: function (user) {\r\n\t\t\tvar response = orders.some(function(order) {\r\n\t\t\t\treturn (\r\n\t\t\t\t\torder.user._id === user._id &&\r\n\t\t\t\t\tNumber(order.date) === Number(_getCurrentDate())\r\n\t\t\t\t);\r\n\t\t\t});\r\n\r\n\t\t\treturn !response;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update data about target order in collection.\r\n\t\t *\r\n\t\t * @param {Object} order\r\n\t\t */\r\n\t\tupdateOrder: function (order) {\r\n\t\t\tOrderStorage.put(order).then(function success() {\r\n\r\n\t\t\t}, function error() {\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Remove order item from collection.\r\n\t\t *\r\n\t\t * @param order\r\n\t\t */\r\n\t\tremoveOrder: function (order) {\r\n\t\t\tOrderStorage.delete(order);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Remove all completed orders from collection.\r\n\t\t */\r\n\t\tclearCompletedOrders: function () {\r\n\t\t\tOrderStorage.clearCompleted();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Mark all order item as completed or uncompleted by arg value.\r\n\t\t *\r\n\t\t * @param {boolean} isCompletedAll\r\n\t\t */\r\n\t\tmarkAll: function (isCompletedAll) {\r\n\t\t\tif (isCompletedAll) {\r\n\t\t\t\torders.forEach(function (order) {\r\n\t\t\t\t\torder.completed = false;\r\n\t\t\t\t\tthis.updateOrder(order);\r\n\t\t\t\t}, this);\r\n\t\t\t} else {\r\n\t\t\t\torders.forEach(function (order) {\r\n\t\t\t\t\tif (!order.completed) {\r\n\t\t\t\t\t\torder.completed = true;\r\n\t\t\t\t\t\tthis.updateOrder(order);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, this);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Check that all orders item are completed.\r\n\t\t *\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tisAllOrderCompleted: function () {\r\n\t\t\tvar ordersCompleted = orders.filter(function (order) {\r\n\t\t\t\treturn (order.completed === true);\r\n\t\t\t});\r\n\r\n\t\t\treturn (ordersCompleted.length === orders.length);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return number of active orders.\r\n\t\t *\r\n\t\t * @returns {Number}\r\n\t\t */\r\n\t\tgetNumOfActive: function () {\r\n\t\t\treturn orders.filter(function (order) {\r\n\t\t\t\treturn (order.completed === false);\r\n\t\t\t}).length;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return number of active orders.\r\n\t\t *\r\n\t\t * @returns {Number}\r\n\t\t */\r\n\t\tgetNumOfCompleted: function () {\r\n\t\t\treturn orders.filter(function (order) {\r\n\t\t\t\treturn (order.completed === true);\r\n\t\t\t}).length;\r\n\t\t},\r\n\r\n\t\tupdateListStatus: function (status) {\r\n\t\t\tStatusStorage.put(status).then(function success() {\r\n\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tloadListStatus: function () {\r\n\t\t\tStatusStorage.get().then(function (status) {\r\n\t\t\t\torderListStatus = status;\r\n\t\t\t\treturn status;\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\topenOrdering: function () {\r\n\t\t\torderListStatus = STATUS_OPEN;\r\n\t\t\tthis.updateListStatus(STATUS_OPEN);\r\n\t\t},\r\n\r\n\t\tfinalizedOrdering: function () {\r\n\t\t\torderListStatus = STATUS_FINALIZED;\r\n\t\t\tthis.updateListStatus(STATUS_FINALIZED);\r\n\t\t},\r\n\r\n\t\torderedOrders: function () {\r\n\t\t\torderListStatus = STATUS_ORDERED;\r\n\t\t\tthis.updateListStatus(STATUS_ORDERED);\r\n\t\t},\r\n\r\n\t\tdeliveredOrders: function () {\r\n\t\t\torderListStatus = STATUS_DELIVERED;\r\n\t\t\tthis.updateListStatus(STATUS_DELIVERED);\r\n\t\t\tthis.markAll(false);\r\n\t\t},\r\n\r\n\t\tisOrderActive: function () {\r\n\t\t\treturn orderListStatus === STATUS_OPEN;\r\n\t\t},\r\n\r\n\t\tisOrderFinalized: function () {\r\n\t\t\treturn orderListStatus === STATUS_FINALIZED;\r\n\t\t},\r\n\r\n\t\tisOrderOrdered: function () {\r\n\t\t\treturn orderListStatus === STATUS_ORDERED;\r\n\t\t},\r\n\r\n\t\tisOrderDelivered: function () {\r\n\t\t\treturn orderListStatus === STATUS_DELIVERED;\r\n\t\t},\r\n\r\n\t\tisOrderRemoveEnabled: function (order) {\r\n\t\t\tvar currentUser = AccountService.getUserData();\r\n\r\n\t\t\treturn this.isOrderActive() && order.user._id === currentUser._id;\r\n\t\t}\r\n\t};\r\n};","/*global angular */\r\n\r\nangular\r\n\t.module('orders')\r\n\t.factory('RestaurantService', ['RestaurantStorage', RestaurantService]);\r\n\r\nfunction RestaurantService(RestaurantStorage) {\r\n\t'use strict';\r\n\r\n\tvar restaurants = null,\r\n\t\tselectedMeal = null,\r\n\t\tselectedRestaurant = null;\r\n\r\n\treturn {\r\n//\t\tselectedRestaurant: null,\r\n\r\n\t\t/**\r\n\t\t * Load orders collection from backend data.\r\n\t\t *\r\n\t\t * @returns {Array}\r\n\t\t */\r\n\t\tloadRestaurant: function () {\r\n\t\t\tif (restaurants !== null) {\r\n\t\t\t\treturn restaurants;\r\n\t\t\t}\r\n\r\n\t\t\treturn RestaurantStorage.get().then(function (restaurantsCollection) {\r\n\t\t\t\trestaurants = restaurantsCollection;\r\n\t\t\t\treturn restaurantsCollection;\r\n\t\t\t}.bind(this));\r\n\t\t},\r\n\r\n\t\tgetSelectedRestaurant: function () {\r\n\t\t\treturn selectedRestaurant;\r\n\t\t},\r\n\r\n\t\tsetSelectedRestaurant: function (selectedItem) {\r\n\t\t\tselectedRestaurant = selectedItem;\r\n\t\t},\r\n\r\n\t\tgetSelectedMeal: function () {\r\n\t\t\treturn selectedMeal;\r\n\t\t},\r\n\r\n\t\tsetSelectedMeal: function (selectedItem) {\r\n\t\t\tselectedMeal = selectedItem;\r\n\t\t}\r\n\t};\r\n};","angular.module('orders', ['ngRoute', 'ui.router', 'satellizer', 'ngMaterial', 'orders.routes', 'angular.filter'])\r\n\t.config(function($authProvider, $windowProvider) {\r\n\t\t'use strict';\r\n\t\t$authProvider.github({\r\n\t\t\tclientId: '3532eda80a0f3b9f16a1',\r\n\t\t\tauthorizationEndpoint: 'https://github.com/login/oauth/authorize',\r\n\t\t\tredirectUri: $windowProvider.$get().location.origin || $windowProvider.$get().location.protocol + '//' + $windowProvider.$get().location.host,\r\n\t\t\toptionalUrlParams: ['scope'],\r\n\t\t\tscope: ['user:email'],\r\n\t\t\tscopeDelimiter: ' ',\r\n\t\t\toauthType: '2.0',\r\n\t\t\tpopupOptions: { width: 1020, height: 618 }\r\n\t\t});\r\n\r\n\t\t$authProvider.oauth2({\r\n\t\t\tname: 'foursquare',\r\n\t\t\turl: '/auth/foursquare',\r\n\t\t\tclientId: 'MTCEJ3NGW2PNNB31WOSBFDSAD4MTHYVAZ1UKIULXZ2CVFC2K',\r\n\t\t\tredirectUri: $windowProvider.$get().location.origin || $windowProvider.$get().location.protocol + '//' + $windowProvider.$get().location.host,\r\n\t\t\tauthorizationEndpoint: 'https://foursquare.com/oauth2/authenticate'\r\n\t\t});\r\n\r\n\t\t$authProvider.baseUrl = 'http://localhost:3000';\r\n\t\t$authProvider.withCredentials = false;\r\n\t})\r\n\t.config(function($mdThemingProvider) {\r\n\t\t'use strict';\r\n\r\n\t\t$mdThemingProvider.theme('default')\r\n\t\t\t.primaryPalette('orange', {\r\n\t\t\t\t'default': '800'\r\n\t\t\t})\r\n\t\t\t.accentPalette('orange', {\r\n\t\t\t\t'default': '200'\r\n\t\t\t});\r\n\t});","/*global angular */\r\n\r\n/**\r\n * The main ordering routing module\r\n *\r\n * @type {angular.Module}\r\n */\r\nangular.module('orders.routes', ['ui.router'])\r\n\t.config(function ($stateProvider, $urlRouterProvider) {\r\n\t\t'use strict';\r\n\r\n\t\tvar loginRequired = function($q, $auth, $location) {\r\n\t\t\tvar deferred = $q.defer();\r\n\t\t\tif ($auth.isAuthenticated()) {\r\n\t\t\t\tdeferred.resolve();\r\n\t\t\t} else {\r\n\t\t\t\t$location.path('/login');\r\n\t\t\t}\r\n\t\t\treturn deferred.promise;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Helper auth functions\r\n\t\t */\r\n\t\tvar skipIfLoggedIn = function($q, $auth) {\r\n\r\n\t\t\tvar deferred = $q.defer();\r\n\t\t\tif ($auth.isAuthenticated()) {\r\n\t\t\t\tdeferred.reject();\r\n\t\t\t} else {\r\n\t\t\t\tdeferred.resolve();\r\n\t\t\t}\r\n\r\n\t\t\treturn deferred.promise;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Routs definitions.\r\n\t\t */\r\n\t\t$stateProvider\r\n\t\t\t.state('login', {\r\n\t\t\t\turl: '/login',\r\n\t\t\t\ttemplateUrl: 'js/templates/login.html',\r\n\t\t\t\tcontroller: 'LoginController as LoginCtrl',\r\n\t\t\t\tresolve: {\r\n\t\t\t\t\tskipIfLoggedIn: skipIfLoggedIn\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.state('logout', {\r\n\t\t\t\turl: '/logout',\r\n\t\t\t\ttemplate: null,\r\n\t\t\t\tcontroller: 'LogoutController as LogoutCtrl'\r\n\t\t\t})\r\n\t\t\t.state('home', {\r\n\t\t\t\turl: '',\r\n\t\t\t\tviews: {\r\n\t\t\t\t\t'': {\r\n\t\t\t\t\t\ttemplateUrl: './js/templates/home.html',\r\n\t\t\t\t\t\tcontroller: 'OrderListController as OrderListCtrl',\r\n\t\t\t\t\t\tresolve: {\r\n\t\t\t\t\t\t\tloginRequired: loginRequired,\r\n\t\t\t\t\t\t\tordersData: function (OrderService) {\r\n\t\t\t\t\t\t\t\treturn OrderService.loadOrders();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t'top@home': {\r\n\t\t\t\t\t\ttemplateUrl: './js/templates/top.html',\r\n\t\t\t\t\t\tcontroller: 'OrderFormController as OrderFormCtrl',\r\n\t\t\t\t\t\tresolve: {\r\n\t\t\t\t\t\t\tloginRequired: loginRequired,\r\n\t\t\t\t\t\t\trestaurantsData: function (RestaurantService) {\r\n\t\t\t\t\t\t\t\treturn RestaurantService.loadRestaurant();\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tuserData: function(AccountService) {\r\n\t\t\t\t\t\t\t\treturn AccountService.getUserData();\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tlistStatus: function (OrderService) {\r\n\t\t\t\t\t\t\t\tOrderService.loadListStatus();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t'menu@home': {\r\n\t\t\t\t\t\ttemplateUrl: './js/templates/menu-top.html',\r\n\t\t\t\t\t\tcontroller: 'MenuController as MenuCtrl'\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.state('home.list', {\r\n\t\t\t\turl: '/',\r\n\t\t\t\ttemplateUrl: './js/templates/order-list.html'\r\n\t\t\t})\r\n\t\t\t.state('home.active', {\r\n\t\t\t\turl: '/:status',\r\n\t\t\t\ttemplateUrl: './js/templates/order-list.html'\r\n\t\t\t})\r\n\t\t\t.state('home.completed', {\r\n\t\t\t\turl: '/:status',\r\n\t\t\t\ttemplateUrl: './js/templates/order-list.html'\r\n\t\t\t});\r\n\r\n\t\t$urlRouterProvider.otherwise('');\r\n\t});","angular.module('orders', ['ngRoute', 'ui.router', 'satellizer', 'ngMaterial', 'orders.routes', 'angular.filter'])\r\n\t.config([\"$authProvider\", \"$windowProvider\", function($authProvider, $windowProvider) {\r\n\t\t'use strict';\r\n\t\t$authProvider.github({\r\n\t\t\tclientId: '3532eda80a0f3b9f16a1',\r\n\t\t\tauthorizationEndpoint: 'https://github.com/login/oauth/authorize',\r\n\t\t\tredirectUri: $windowProvider.$get().location.origin || $windowProvider.$get().location.protocol + '//' + $windowProvider.$get().location.host,\r\n\t\t\toptionalUrlParams: ['scope'],\r\n\t\t\tscope: ['user:email'],\r\n\t\t\tscopeDelimiter: ' ',\r\n\t\t\toauthType: '2.0',\r\n\t\t\tpopupOptions: { width: 1020, height: 618 }\r\n\t\t});\r\n\r\n\t\t$authProvider.oauth2({\r\n\t\t\tname: 'foursquare',\r\n\t\t\turl: '/auth/foursquare',\r\n\t\t\tclientId: 'MTCEJ3NGW2PNNB31WOSBFDSAD4MTHYVAZ1UKIULXZ2CVFC2K',\r\n\t\t\tredirectUri: $windowProvider.$get().location.origin || $windowProvider.$get().location.protocol + '//' + $windowProvider.$get().location.host,\r\n\t\t\tauthorizationEndpoint: 'https://foursquare.com/oauth2/authenticate'\r\n\t\t});\r\n\r\n\t\t$authProvider.baseUrl = 'http://localhost:3000';\r\n\t\t$authProvider.withCredentials = false;\r\n\t}])\r\n\t.config([\"$mdThemingProvider\", function($mdThemingProvider) {\r\n\t\t'use strict';\r\n\r\n\t\t$mdThemingProvider.theme('default')\r\n\t\t\t.primaryPalette('orange', {\r\n\t\t\t\t'default': '800'\r\n\t\t\t})\r\n\t\t\t.accentPalette('orange', {\r\n\t\t\t\t'default': '200'\r\n\t\t\t});\r\n\t}]);\n/*global angular */\r\n\r\n/**\r\n * The main ordering routing module\r\n *\r\n * @type {angular.Module}\r\n */\r\nangular.module('orders.routes', ['ui.router'])\r\n\t.config([\"$stateProvider\", \"$urlRouterProvider\", function ($stateProvider, $urlRouterProvider) {\r\n\t\t'use strict';\r\n\r\n\t\tvar loginRequired = function($q, $auth, $location) {\r\n\t\t\tvar deferred = $q.defer();\r\n\t\t\tif ($auth.isAuthenticated()) {\r\n\t\t\t\tdeferred.resolve();\r\n\t\t\t} else {\r\n\t\t\t\t$location.path('/login');\r\n\t\t\t}\r\n\t\t\treturn deferred.promise;\r\n\t\t};\r\n\t\tloginRequired.$inject = [\"$q\", \"$auth\", \"$location\"];\r\n\r\n\t\t/**\r\n\t\t * Helper auth functions\r\n\t\t */\r\n\t\tvar skipIfLoggedIn = function($q, $auth) {\r\n\r\n\t\t\tvar deferred = $q.defer();\r\n\t\t\tif ($auth.isAuthenticated()) {\r\n\t\t\t\tdeferred.reject();\r\n\t\t\t} else {\r\n\t\t\t\tdeferred.resolve();\r\n\t\t\t}\r\n\r\n\t\t\treturn deferred.promise;\r\n\t\t};\r\n\t\tskipIfLoggedIn.$inject = [\"$q\", \"$auth\"];\r\n\r\n\t\t/**\r\n\t\t * Routs definitions.\r\n\t\t */\r\n\t\t$stateProvider\r\n\t\t\t.state('login', {\r\n\t\t\t\turl: '/login',\r\n\t\t\t\ttemplateUrl: 'js/templates/login.html',\r\n\t\t\t\tcontroller: 'LoginController as LoginCtrl',\r\n\t\t\t\tresolve: {\r\n\t\t\t\t\tskipIfLoggedIn: skipIfLoggedIn\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.state('logout', {\r\n\t\t\t\turl: '/logout',\r\n\t\t\t\ttemplate: null,\r\n\t\t\t\tcontroller: 'LogoutController as LogoutCtrl'\r\n\t\t\t})\r\n\t\t\t.state('home', {\r\n\t\t\t\turl: '',\r\n\t\t\t\tviews: {\r\n\t\t\t\t\t'': {\r\n\t\t\t\t\t\ttemplateUrl: './js/templates/home.html',\r\n\t\t\t\t\t\tcontroller: 'OrderListController as OrderListCtrl',\r\n\t\t\t\t\t\tresolve: {\r\n\t\t\t\t\t\t\tloginRequired: loginRequired,\r\n\t\t\t\t\t\t\tordersData: [\"OrderService\", function (OrderService) {\r\n\t\t\t\t\t\t\t\treturn OrderService.loadOrders();\r\n\t\t\t\t\t\t\t}]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t'top@home': {\r\n\t\t\t\t\t\ttemplateUrl: './js/templates/top.html',\r\n\t\t\t\t\t\tcontroller: 'OrderFormController as OrderFormCtrl',\r\n\t\t\t\t\t\tresolve: {\r\n\t\t\t\t\t\t\tloginRequired: loginRequired,\r\n\t\t\t\t\t\t\trestaurantsData: [\"RestaurantService\", function (RestaurantService) {\r\n\t\t\t\t\t\t\t\treturn RestaurantService.loadRestaurant();\r\n\t\t\t\t\t\t\t}],\r\n\t\t\t\t\t\t\tuserData: [\"AccountService\", function(AccountService) {\r\n\t\t\t\t\t\t\t\treturn AccountService.getUserData();\r\n\t\t\t\t\t\t\t}],\r\n\t\t\t\t\t\t\tlistStatus: [\"OrderService\", function (OrderService) {\r\n\t\t\t\t\t\t\t\tOrderService.loadListStatus();\r\n\t\t\t\t\t\t\t}]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t'menu@home': {\r\n\t\t\t\t\t\ttemplateUrl: './js/templates/menu-top.html',\r\n\t\t\t\t\t\tcontroller: 'MenuController as MenuCtrl'\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.state('home.list', {\r\n\t\t\t\turl: '/',\r\n\t\t\t\ttemplateUrl: './js/templates/order-list.html'\r\n\t\t\t})\r\n\t\t\t.state('home.active', {\r\n\t\t\t\turl: '/:status',\r\n\t\t\t\ttemplateUrl: './js/templates/order-list.html'\r\n\t\t\t})\r\n\t\t\t.state('home.completed', {\r\n\t\t\t\turl: '/:status',\r\n\t\t\t\ttemplateUrl: './js/templates/order-list.html'\r\n\t\t\t});\r\n\r\n\t\t$urlRouterProvider.otherwise('');\r\n\t}]);\n/*global angular */\r\n\r\n/**\r\n * Service that persists and retrieves orders from local storage.\r\n */\r\nangular\r\n\t.module('orders')\r\n\t.factory('OrderStorage', ['$q', OrderStorage]);\r\n\r\nfunction OrderStorage($q) {\r\n\t'use strict';\r\n\r\n\tvar STORAGE_ID = 'orders-storage',\r\n\t\torders = [],\r\n\r\n\t\t_getFromLocalStorage = function () {\r\n\t\t\treturn angular.fromJson(localStorage.getItem(STORAGE_ID) || '[]');\r\n\t\t},\r\n\t\t_saveToLocalStorage = function (orders) {\r\n\t\t\tlocalStorage.setItem(STORAGE_ID, angular.toJson(orders));\r\n\t\t};\r\n\r\n\treturn {\r\n\t\tclearCompleted: function () {\r\n\t\t\tvar deferred = $q.defer();\r\n\r\n\t\t\tvar incompleteOrders = orders.filter(function (order) {\r\n\t\t\t\treturn !order.completed;\r\n\t\t\t});\r\n\r\n\t\t\tangular.copy(incompleteOrders, orders);\r\n\r\n\t\t\t_saveToLocalStorage(orders);\r\n\t\t\tdeferred.resolve(orders);\r\n\r\n\t\t\treturn deferred.promise;\r\n\t\t},\r\n\r\n\t\tdelete: function (order) {\r\n\t\t\tvar deferred = $q.defer();\r\n\r\n\t\t\torders.splice(orders.indexOf(order), 1);\r\n\r\n\t\t\t_saveToLocalStorage(orders);\r\n\t\t\tdeferred.resolve(orders);\r\n\r\n\t\t\treturn deferred.promise;\r\n\t\t},\r\n\r\n\t\tget: function () {\r\n\t\t\tvar deferred = $q.defer();\r\n\r\n\t\t\tangular.copy(_getFromLocalStorage(), orders);\r\n\r\n\t\t\tdeferred.resolve(orders);\r\n\r\n\t\t\treturn deferred.promise;\r\n\t\t},\r\n\r\n\t\tinsert: function (order) {\r\n\t\t\tvar deferred = $q.defer();\r\n\r\n\t\t\torders.push(order);\r\n\r\n\t\t\t_saveToLocalStorage(orders);\r\n\t\t\tdeferred.resolve(orders);\r\n\r\n\t\t\treturn deferred.promise;\r\n\t\t},\r\n\r\n\t\tput: function (order, index) {\r\n\t\t\tvar deferred = $q.defer();\r\n\r\n\t\t\torders[orders.indexOf(order)] = order;\r\n\r\n\t\t\t_saveToLocalStorage(orders);\r\n\t\t\tdeferred.resolve(orders);\r\n\r\n\t\t\treturn deferred.promise;\r\n\t\t}\r\n\t};\r\n};\r\n\n/*global angular */\r\n\r\n/**\r\n * Service that persists and retrieves restaurant and our menu on local storage.\r\n */\r\nangular\r\n\t.module('orders')\r\n\t.factory('RestaurantStorage', ['$q', RestaurantStorage]);\r\n\r\nfunction RestaurantStorage($q) {\r\n\t'use strict';\r\n\r\n\tvar restaurantData = [{\r\n\t\t'id': 0,\r\n\t\t'name': 'ThaiVet',\r\n\t\t'menu': [\r\n\t\t\t{\r\n\t\t\t\t'name': 'Wołowina po tajsku',\r\n\t\t\t\t'price': '13.99'\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t'name': 'Kaczka po chińsku',\r\n\t\t\t\t'price': '17.99'\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t'name': 'Kurzczak curry zielone',\r\n\t\t\t\t'price': '12.99'\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t'name': 'Krewetki w pięciu smakach',\r\n\t\t\t\t'price': '20.00'\r\n\t\t\t}\r\n\t\t]\r\n\t}, {\r\n\t\t'id': 1,\r\n\t\t'name': 'Greenway',\r\n\t\t'menu': [\r\n\t\t\t{\r\n\t\t\t\t'name': 'Kofta z pieca',\r\n\t\t\t\t'price': '16.99'\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t'name': 'Placki z ciecierzycy',\r\n\t\t\t\t'price': '15.99'\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t'name': 'Zapiekanka z cukinii',\r\n\t\t\t\t'price': '15.99'\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t'name': 'Gulasz z soji',\r\n\t\t\t\t'price': '13.00'\r\n\t\t\t}\r\n\t\t]\r\n\t}];\r\n\r\n\tvar STORAGE_ID = 'restaurant-storage',\r\n\t\trestaurants = [],\r\n\r\n\t\t_getFromLocalStorage = function () {\r\n\t\t\treturn angular.fromJson(localStorage.getItem(STORAGE_ID) || '[]');\r\n\t\t},\r\n\t\t_saveToLocalStorage = function (restaurantsData) {\r\n\t\t\tlocalStorage.setItem(STORAGE_ID, angular.toJson(restaurantsData));\r\n\t\t};\r\n\r\n\t_saveToLocalStorage(restaurantData);\r\n\r\n\treturn {\r\n\t\tloadRestaurantsData: function () {\r\n\t\t\tvar deferred = $q.defer();\r\n\r\n\t\t\tvar incompleteTodos = restaurants.filter(function (todo) {\r\n\t\t\t\treturn !todo.completed;\r\n\t\t\t});\r\n\r\n\t\t\tangular.copy(incompleteTodos, restaurants);\r\n\r\n\t\t\t_saveToLocalStorage(restaurants);\r\n\t\t\tdeferred.resolve(restaurants);\r\n\r\n\t\t\treturn deferred.promise;\r\n\t\t},\r\n\r\n\t\tdelete: function (restaurant) {\r\n\t\t\tvar deferred = $q.defer();\r\n\r\n\t\t\trestaurants.splice(restaurants.indexOf(restaurant), 1);\r\n\r\n\t\t\t_saveToLocalStorage(restaurants);\r\n\t\t\tdeferred.resolve(restaurants);\r\n\r\n\t\t\treturn deferred.promise;\r\n\t\t},\r\n\r\n\t\tget: function () {\r\n\t\t\tvar deferred = $q.defer();\r\n\r\n\t\t\tangular.copy(_getFromLocalStorage(), restaurants);\r\n\r\n\t\t\tdeferred.resolve(restaurants);\r\n\r\n\t\t\treturn deferred.promise;\r\n\t\t},\r\n\r\n\t\tinsert: function (restaurant) {\r\n\t\t\tvar deferred = $q.defer();\r\n\r\n\t\t\trestaurants.push(restaurant);\r\n\r\n\t\t\t_saveToLocalStorage(restaurants);\r\n\t\t\tdeferred.resolve(restaurants);\r\n\r\n\t\t\treturn deferred.promise;\r\n\t\t},\r\n\r\n\t\tput: function (restaurant, index) {\r\n\t\t\tvar deferred = $q.defer();\r\n\r\n\t\t\trestaurants[restaurants.indexOf(restaurant)] = restaurant;\r\n\r\n\t\t\t_saveToLocalStorage(restaurants);\r\n\t\t\tdeferred.resolve(restaurants);\r\n\r\n\t\t\treturn deferred.promise;\r\n\t\t}\r\n\t};\r\n};\r\n\n/*global angular */\r\n\r\n/**\r\n * Service that persists and retrieves order list status from local storage.\r\n */\r\nangular\r\n\t.module('orders')\r\n\t.factory('StatusStorage', ['$q', StatusStorage]);\r\n\r\nfunction StatusStorage($q) {\r\n\t'use strict';\r\n\r\n\tvar STORAGE_ID = 'status-storage',\r\n\t\tstatus = 0,\r\n\r\n\t\t_getFromLocalStorage = function () {\r\n\t\t\treturn localStorage.getItem(STORAGE_ID || 0);\r\n\t\t},\r\n\t\t_saveToLocalStorage = function (status) {\r\n\t\t\tlocalStorage.setItem(STORAGE_ID, status);\r\n\t\t};\r\n\r\n\treturn {\r\n\t\tget: function () {\r\n\t\t\tvar deferred = $q.defer();\r\n\r\n\t\t\tstatus = parseInt(_getFromLocalStorage());\r\n\t\t\tdeferred.resolve(status);\r\n\r\n\t\t\treturn deferred.promise;\r\n\t\t},\r\n\r\n\t\tput: function (status, index) {\r\n\t\t\tvar deferred = $q.defer();\r\n\r\n\t\t\t_saveToLocalStorage(status);\r\n\t\t\tdeferred.resolve(status);\r\n\r\n\t\t\treturn deferred.promise;\r\n\t\t}\r\n\t};\r\n};\r\n\n/*global angular */\r\n\r\n/**\r\n * Controller to order list and order service connection.\r\n */\r\nangular\r\n\t.module('orders')\r\n\t.controller('LoginController', [\r\n\t\t'$scope',\r\n\t\t'$location',\r\n\t\t'$auth',\r\n\t\tLoginCtrl\r\n\t]);\r\n\r\nfunction LoginCtrl($scope, $location, $auth) {\r\n\t'use strict';\r\n\tvar vm = this;\r\n\r\n\tvm.login = function() {\r\n\t\t$auth.login($scope.user)\r\n\t\t\t.then(function() {\r\n\t\t\t\t//toastr.success('You have successfully signed in!');\r\n\t\t\t\t$location.path('');\r\n\t\t\t})\r\n\t\t\t.catch(function(error) {\r\n\t\t\t\t//toastr.error(error.data.message, error.status);\r\n\t\t\t});\r\n\t};\r\n\r\n\tvm.authenticate = function(provider) {\r\n\t\t$auth.authenticate(provider)\r\n\t\t\t.then(function() {\r\n\t\t\t\t$location.path('');\r\n\t\t\t})\r\n\t\t\t.catch(function(error) {\r\n\t\t\t\t$location.path('/logout');\r\n\t\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Clean up memory after destroy component.\r\n\t */\r\n\t$scope.$on('$destroy', function(){\r\n\t\tvm = null;\r\n\t\t$scope = null;\r\n\t});\r\n}\r\n\n/*global angular */\r\n\r\n/**\r\n * Controller to order list and order service connection.\r\n */\r\nangular\r\n\t.module('orders')\r\n\t.controller('LogoutController', [\r\n\t\t'$scope',\r\n\t\t'$location',\r\n\t\t'$auth',\r\n\t\tLogoutCtrl\r\n\t]);\r\n\r\nfunction LogoutCtrl($scope, $location, $auth) {\r\n\t'use strict';\r\n\r\n\tvar vm = this;\r\n\r\n\tif (!$auth.isAuthenticated()) { return; }\r\n\r\n\t$auth.logout()\r\n\t\t.then(function() {\r\n\t\t\t//toastr.info('You have been logged out');\r\n\t\t\t$location.path('/login');\r\n\t\t});\r\n\r\n\t/**\r\n\t * Clean up memory after destroy component.\r\n\t */\r\n\t$scope.$on('$destroy', function(){\r\n\t\tvm = null;\r\n\t\t$scope = null;\r\n\t});\r\n}\r\n\n/*global angular */\r\n\r\nangular\r\n\t.module('orders')\r\n\t.factory('AccountModel', ['$http', AccountModel])\r\n\t.factory('AccountService', ['AccountModel', AccountService]);\r\n\r\nfunction AccountModel($http) {\r\n\t'use strict';\r\n\treturn {\r\n\t\tgetProfile: function() {\r\n\t\t\treturn $http.get('http://localhost:3000/api/me');\r\n\t\t},\r\n\r\n\t\tupdateProfile: function(profileData) {\r\n\t\t\treturn $http.put('/api/me', profileData);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nfunction AccountService(AccountModel) {\r\n\t'use strict';\r\n    var user = null;\r\n\r\n\treturn {\r\n\t\tgetUserData: function () {\r\n\t\t\tif (user) {\r\n\t\t\t\treturn user;\r\n\t\t\t}\r\n\r\n\t\t\treturn AccountModel.getProfile()\r\n\t\t\t\t.then(function(response) {\r\n\t\t\t\t\tuser = response.data;\r\n\t\t\t\t\treturn response.data;\r\n\t\t\t\t})\r\n\t\t\t\t.catch(function(response) {});\r\n\t\t}\r\n\t};\r\n};\r\n\n/**\r\n * Controller to menu order list state\r\n */\r\nangular\r\n\t.module('orders')\r\n\t.controller('MenuController', [\r\n\t\t'$scope',\r\n\t\t'OrderService',\r\n\t\tMenuCtrl\r\n\t]);\r\n\r\nfunction MenuCtrl($scope, OrderService) {\r\n\t'use strict';\r\n\r\n\tvar vm = this;\r\n\tvm.orderService = OrderService;\r\n\tvm.isMenuOpen = false;\r\n\r\n\t/**\r\n\t * Clean up memory after destroy component.\r\n\t */\r\n\t$scope.$on('$destroy', function(){\r\n\t\tvm.clearAfterDestroy();\r\n\t});\r\n\r\n\tvm.showHideMenu = function() {\r\n\t\tvm.isMenuOpen = !vm.isMenuOpen;\r\n\t};\r\n\r\n\tvm.clearAfterDestroy = function () {\r\n\t\tvm = null;\r\n\t\t$scope = null;\r\n\t};\r\n}\r\n\n/**\r\n * Controller to order list and order service connection.\r\n */\r\nangular\r\n\t.module('orders')\r\n\t.controller('OrderFormController', [\r\n\t\t'$scope',\r\n\t\t'OrderService',\r\n\t\t'restaurantsData',\r\n\t\t'userData',\r\n\t\t'$auth',\r\n\t\t'RestaurantService',\r\n\t\tOrderFormCtrl\r\n\t]);\r\n\r\nfunction OrderFormCtrl($scope, OrderService, restaurantsData, userData, $auth, RestaurantService) {\r\n\t'use strict';\r\n\r\n\tvar vm = this;\r\n\r\n\tvm.orderService = OrderService;\r\n\tvm.restaurants = restaurantsData;\r\n\tvm.user = userData;\r\n\tvm.restaurantService = RestaurantService;\r\n\tvm.isAddOrderEnabled = false;\r\n\r\n\t/**\r\n\t * Listener to all changes om orders.\r\n\t */\r\n\t$scope.$watch('OrderFormCtrl.restaurantService.selectedMeal', function () {\r\n\t\tif (vm.restaurantService.selectedMeal) {\r\n\t\t\tvm.isAddOrderEnabled = true;\r\n\t\t}\r\n\t}, true);\r\n\r\n\t/**\r\n\t * Clean up memory after destroy component.\r\n\t */\r\n\t$scope.$on('$destroy', function(){\r\n\t\tvm = null;\r\n\t\t$scope = null;\r\n\t});\r\n\r\n\tvm.isAuthenticated = function() {\r\n\t\treturn $auth.isAuthenticated();\r\n\t};\r\n\r\n\tvm.addOrder = function () {\r\n\t\tvar order = vm.orderService.getNewOrder(),\r\n\t\t\tselectedMeal = vm.restaurantService.selectedMeal;\r\n\r\n\t\tconsole.log('----- OrderFormCtrl:addOrder:order: ', order);\r\n\t\torder.user = vm.user;\r\n\t\torder.title = vm.restaurantService.selectedRestaurant.name + ' - ' + selectedMeal.name;\r\n\t\torder.price = selectedMeal.price;\r\n\r\n\t\tOrderService.addOrder(order);\r\n\t};\r\n}\r\n\n/*global angular */\r\n\r\n/**\r\n * Controller to order list and order service connection.\r\n */\r\nangular\r\n\t.module('orders')\r\n\t.controller('OrderListController', [\r\n\t\t'$scope',\r\n\t\t'OrderService',\r\n\t\t'ordersData',\r\n\t\t'$auth',\r\n\t\t'$state',\r\n\t\tOrderListCtrl\r\n\t]);\r\n\r\nfunction OrderListCtrl($scope, OrderService, ordersData, $auth, $state) {\r\n\t'use strict';\r\n\r\n\tvar vm = this,\r\n\t\tTAP_COMPLETED = 'completed',\r\n\t\tTAP_ACTIVE = 'active';\r\n\r\n\tvm.orderService = OrderService;\r\n\tvm.isAllCompleted = OrderService.isAllOrderCompleted();\r\n\tvm.orders = ordersData;\r\n\r\n\t/**\r\n\t * Listener to all changes om orders.\r\n\t */\r\n\t$scope.$watch('OrderListCtrl.orders', function () {\r\n\t\tvm.remainingCount = OrderService.getNumOfActive();\r\n\t\tvm.completedCount = OrderService.getNumOfCompleted();\r\n\t\tvm.isAllCompleted = OrderService.isAllOrderCompleted();\r\n\t}, true);\r\n\r\n\t/**\r\n\t * Monitor the current route for changes and adjust the filter accordingly.\r\n\t */\r\n\t$scope.$on('$stateChangeSuccess', function () {\r\n\t\tvm.status = $state.params.status || '';\r\n\r\n\t\tif (vm.status === '') {\r\n\t\t\t$state.go('home.list');\r\n\t\t}\r\n\r\n\t\tvm.statusFilter = (vm.status === TAP_ACTIVE) ?\r\n\t\t\t{ completed: false } : (vm.status === TAP_COMPLETED) ?\r\n\t\t\t{ completed: true } : {};\r\n\t});\r\n\r\n\t/**\r\n\t * Clean up memory after destroy component.\r\n\t */\r\n\t$scope.$on('$destroy', function(){\r\n\t\tvm = null;\r\n\t\t$scope = null;\r\n\t});\r\n\r\n\t/**\r\n\t * @returns {boolean}\r\n\t */\r\n\tvm.isActiveTap = function() {\r\n\t\treturn (vm.status === TAP_ACTIVE);\r\n\t};\r\n\r\n\t/**\r\n\t * @returns {boolean}\r\n\t */\r\n\tvm.isCompletedTap = function() {\r\n\t\treturn (vm.status === TAP_COMPLETED);\r\n\t};\r\n\r\n\tvm.isAuthenticated = function() {\r\n\t\treturn $auth.isAuthenticated();\r\n\t};\r\n}\r\n\n/*global angular */\r\n\r\nangular\r\n\t.module('orders')\r\n\t.factory('OrderService', ['OrderStorage', 'StatusStorage','AccountService', OrderService]);\r\n\r\nfunction OrderService(OrderStorage, StatusStorage, AccountService) {\r\n\t'use strict';\r\n\r\n\tvar newOrder = {\r\n\t\tcompleted: false,\r\n\t\ttitle: '',\r\n\t\tuser: null,\r\n\t\tprice:'',\r\n\t\tdate:''\r\n\t},\r\n\t\torders = null,\r\n\t\torderListStatus = 0;\r\n\r\n\tvar STATUS_OPEN = 0,\r\n\t\tSTATUS_FINALIZED = 1,\r\n\t\tSTATUS_ORDERED = 2,\r\n\t\tSTATUS_DELIVERED = 3;\r\n\r\n\tvar _getCurrentDate = function () {\r\n\t\tvar currentDate = new Date();\r\n\r\n\t\tcurrentDate.setHours(0);\r\n\t\tcurrentDate.setMinutes(0);\r\n\t\tcurrentDate.setSeconds(0);\r\n\t\tcurrentDate.setMilliseconds(0);\r\n\r\n\t\treturn currentDate;\r\n\t};\r\n\r\n\treturn {\r\n\t\t/**\r\n\t\t * Get new empty order object.\r\n\t\t *\r\n\t\t * @returns {{completed: boolean, title: string}}\r\n\t\t */\r\n\t\tgetNewOrder: function () {\r\n\t\t\treturn newOrder;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Load orders collection from backend data.\r\n\t\t *\r\n\t\t * @returns {Array}\r\n\t\t */\r\n\t\tloadOrders: function () {\r\n\t\t\tif (orders !== null) {\r\n\t\t\t\treturn orders;\r\n\t\t\t}\r\n\r\n\t\t\treturn OrderStorage.get().then(function (ordersCollection) {\r\n\t\t\t\torders = ordersCollection;\r\n\r\n\t\t\t\tordersCollection.map(function (item) {\r\n\t\t\t\t\titem.date = new Date(item.date);\r\n\t\t\t\t\treturn item;\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn ordersCollection;\r\n\t\t\t}.bind(this));\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add new order item to collection.\r\n\t\t */\r\n\t\taddOrder: function (newOrderItem) {\r\n\t\t\tif (!newOrder.title) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tnewOrderItem.date = _getCurrentDate();\r\n\r\n\t\t\tOrderStorage.insert(newOrderItem).then(function success() {\r\n\t\t\t\tnewOrder = {\r\n\t\t\t\t\tcompleted: false,\r\n\t\t\t\t\ttitle: '',\r\n\t\t\t\t\tuser: null,\r\n\t\t\t\t\tprice:'',\r\n\t\t\t\t\tdate:''\r\n\t\t\t\t};\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Check that user order meal today yet.\r\n\t\t *\r\n\t\t * @param {Object} user\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tisUserOrderedToday: function (user) {\r\n\t\t\tvar response = orders.some(function(order) {\r\n\t\t\t\treturn (\r\n\t\t\t\t\torder.user._id === user._id &&\r\n\t\t\t\t\tNumber(order.date) === Number(_getCurrentDate())\r\n\t\t\t\t);\r\n\t\t\t});\r\n\r\n\t\t\treturn !response;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update data about target order in collection.\r\n\t\t *\r\n\t\t * @param {Object} order\r\n\t\t */\r\n\t\tupdateOrder: function (order) {\r\n\t\t\tOrderStorage.put(order).then(function success() {\r\n\r\n\t\t\t}, function error() {\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Remove order item from collection.\r\n\t\t *\r\n\t\t * @param order\r\n\t\t */\r\n\t\tremoveOrder: function (order) {\r\n\t\t\tOrderStorage.delete(order);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Remove all completed orders from collection.\r\n\t\t */\r\n\t\tclearCompletedOrders: function () {\r\n\t\t\tOrderStorage.clearCompleted();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Mark all order item as completed or uncompleted by arg value.\r\n\t\t *\r\n\t\t * @param {boolean} isCompletedAll\r\n\t\t */\r\n\t\tmarkAll: function (isCompletedAll) {\r\n\t\t\tif (isCompletedAll) {\r\n\t\t\t\torders.forEach(function (order) {\r\n\t\t\t\t\torder.completed = false;\r\n\t\t\t\t\tthis.updateOrder(order);\r\n\t\t\t\t}, this);\r\n\t\t\t} else {\r\n\t\t\t\torders.forEach(function (order) {\r\n\t\t\t\t\tif (!order.completed) {\r\n\t\t\t\t\t\torder.completed = true;\r\n\t\t\t\t\t\tthis.updateOrder(order);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, this);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Check that all orders item are completed.\r\n\t\t *\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tisAllOrderCompleted: function () {\r\n\t\t\tvar ordersCompleted = orders.filter(function (order) {\r\n\t\t\t\treturn (order.completed === true);\r\n\t\t\t});\r\n\r\n\t\t\treturn (ordersCompleted.length === orders.length);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return number of active orders.\r\n\t\t *\r\n\t\t * @returns {Number}\r\n\t\t */\r\n\t\tgetNumOfActive: function () {\r\n\t\t\treturn orders.filter(function (order) {\r\n\t\t\t\treturn (order.completed === false);\r\n\t\t\t}).length;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return number of active orders.\r\n\t\t *\r\n\t\t * @returns {Number}\r\n\t\t */\r\n\t\tgetNumOfCompleted: function () {\r\n\t\t\treturn orders.filter(function (order) {\r\n\t\t\t\treturn (order.completed === true);\r\n\t\t\t}).length;\r\n\t\t},\r\n\r\n\t\tupdateListStatus: function (status) {\r\n\t\t\tStatusStorage.put(status).then(function success() {\r\n\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tloadListStatus: function () {\r\n\t\t\tStatusStorage.get().then(function (status) {\r\n\t\t\t\torderListStatus = status;\r\n\t\t\t\treturn status;\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\topenOrdering: function () {\r\n\t\t\torderListStatus = STATUS_OPEN;\r\n\t\t\tthis.updateListStatus(STATUS_OPEN);\r\n\t\t},\r\n\r\n\t\tfinalizedOrdering: function () {\r\n\t\t\torderListStatus = STATUS_FINALIZED;\r\n\t\t\tthis.updateListStatus(STATUS_FINALIZED);\r\n\t\t},\r\n\r\n\t\torderedOrders: function () {\r\n\t\t\torderListStatus = STATUS_ORDERED;\r\n\t\t\tthis.updateListStatus(STATUS_ORDERED);\r\n\t\t},\r\n\r\n\t\tdeliveredOrders: function () {\r\n\t\t\torderListStatus = STATUS_DELIVERED;\r\n\t\t\tthis.updateListStatus(STATUS_DELIVERED);\r\n\t\t\tthis.markAll(false);\r\n\t\t},\r\n\r\n\t\tisOrderActive: function () {\r\n\t\t\treturn orderListStatus === STATUS_OPEN;\r\n\t\t},\r\n\r\n\t\tisOrderFinalized: function () {\r\n\t\t\treturn orderListStatus === STATUS_FINALIZED;\r\n\t\t},\r\n\r\n\t\tisOrderOrdered: function () {\r\n\t\t\treturn orderListStatus === STATUS_ORDERED;\r\n\t\t},\r\n\r\n\t\tisOrderDelivered: function () {\r\n\t\t\treturn orderListStatus === STATUS_DELIVERED;\r\n\t\t},\r\n\r\n\t\tisOrderRemoveEnabled: function (order) {\r\n\t\t\tvar currentUser = AccountService.getUserData();\r\n\r\n\t\t\treturn this.isOrderActive() && order.user._id === currentUser._id;\r\n\t\t}\r\n\t};\r\n};\n/*global angular */\r\n\r\nangular\r\n\t.module('orders')\r\n\t.factory('RestaurantService', ['RestaurantStorage', RestaurantService]);\r\n\r\nfunction RestaurantService(RestaurantStorage) {\r\n\t'use strict';\r\n\r\n\tvar restaurants = null,\r\n\t\tselectedMeal = null,\r\n\t\tselectedRestaurant = null;\r\n\r\n\treturn {\r\n//\t\tselectedRestaurant: null,\r\n\r\n\t\t/**\r\n\t\t * Load orders collection from backend data.\r\n\t\t *\r\n\t\t * @returns {Array}\r\n\t\t */\r\n\t\tloadRestaurant: function () {\r\n\t\t\tif (restaurants !== null) {\r\n\t\t\t\treturn restaurants;\r\n\t\t\t}\r\n\r\n\t\t\treturn RestaurantStorage.get().then(function (restaurantsCollection) {\r\n\t\t\t\trestaurants = restaurantsCollection;\r\n\t\t\t\treturn restaurantsCollection;\r\n\t\t\t}.bind(this));\r\n\t\t},\r\n\r\n\t\tgetSelectedRestaurant: function () {\r\n\t\t\treturn selectedRestaurant;\r\n\t\t},\r\n\r\n\t\tsetSelectedRestaurant: function (selectedItem) {\r\n\t\t\tselectedRestaurant = selectedItem;\r\n\t\t},\r\n\r\n\t\tgetSelectedMeal: function () {\r\n\t\t\treturn selectedMeal;\r\n\t\t},\r\n\r\n\t\tsetSelectedMeal: function (selectedItem) {\r\n\t\t\tselectedMeal = selectedItem;\r\n\t\t}\r\n\t};\r\n};"],"sourceRoot":"/source/"}